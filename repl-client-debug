

---- [ null ] ---->
"(do (in-ns 'shadow.user) nil)"
<---------
"nil"

---- [ null ] ---->
"(require '[flow-storm.api :include-macros true])"
<---------
"nil"

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(require '[flow-storm.runtime.debuggers-api :include-macros true]) {:build-id :dev-test})"
<---------
"nil"

---- [ null ] ---->
"(do (in-ns 'shadow.user) nil)"
<---------
"nil"

---- [ null ] ---->
"(require '[flow-storm.api :include-macros true])"
<---------
"nil"

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(require '[flow-storm.runtime.debuggers-api :include-macros true]) {:build-id :dev-test})"
<---------
"nil"

---- [ shadow.user ] ---->
"(flow-storm.runtime.debuggers-api/get-storm-instrumentation :cljs)"
<---------
nil

---- [ shadow.user ] ---->
"(flow-storm.runtime.debuggers-api/get-storm-instrumentation :cljs)"
<---------
nil

---- [ null ] ---->
"(do (in-ns 'shadow.user) nil)"
<---------
"nil"

---- [ null ] ---->
"(require '[flow-storm.api :include-macros true])"
<---------
"nil"

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(require '[flow-storm.runtime.debuggers-api :include-macros true]) {:build-id :dev})"
<---------
"nil"

---- [ null ] ---->
"(do (in-ns 'shadow.user) nil)"
<---------
"nil"

---- [ null ] ---->
"(require '[flow-storm.api :include-macros true])"
<---------
"nil"

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(require '[flow-storm.runtime.debuggers-api :include-macros true]) {:build-id :dev})"
<---------
nil

---- [ shadow.user ] ---->
"(flow-storm.runtime.debuggers-api/get-storm-instrumentation :cljs)"
<---------
nil

---- [ shadow.user ] ---->
"(flow-storm.runtime.debuggers-api/get-storm-instrumentation :cljs)"
<---------
nil

---- [ null ] ---->
"(do (in-ns 'shadow.user) nil)"
<---------
"nil"

---- [ null ] ---->
"(require '[flow-storm.api :include-macros true])"
<---------
"nil"

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(require '[flow-storm.runtime.debuggers-api :include-macros true]) {:build-id :dev})"
<---------
nil

---- [ null ] ---->
"(do (in-ns 'shadow.user) nil)"
<---------
"nil"

---- [ null ] ---->
"(require '[flow-storm.api :include-macros true])"
<---------
"nil"

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(require '[flow-storm.runtime.debuggers-api :include-macros true]) {:build-id :dev})"
<---------
nil

---- [ shadow.user ] ---->
"(flow-storm.runtime.debuggers-api/get-storm-instrumentation :cljs)"
<---------
"{:instrument-only-prefixes [\"electric-starter-app\"], :skip-prefixes [], :skip-regex nil}"

---- [ shadow.user ] ---->
"(flow-storm.runtime.debuggers-api/get-storm-instrumentation :cljs)"
<---------
"{:instrument-only-prefixes [\"electric-starter-app\"], :skip-prefixes [], :skip-regex nil}"

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(def test (flow-storm.runtime.values/deref-value (flow-storm.types/make-value-ref 65))) {:build-id :dev})"
<---------
nil

---- [ shadow.user ] ---->
"((requiring-resolve 'hansel.instrument.utils/eval-in-ns-fn-cljs) 'cljs.user '(def test1 (flow-storm.runtime.values/deref-value (flow-storm.types/make-value-ref 65))) {:build-id :dev})"
<---------
"(var cljs.user/test1)"